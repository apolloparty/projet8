import requests
import json
import math
import random

class Datagrab:
    """

    """
    def __init__(self, product_generic):
        self.url = "https://fr.openfoodfacts.org/cgi/search.pl"
        self.product_generic_name = product_generic
        self.params_overall = {
            "action": "process",
            "tagtype_0": "categories",
            "tag_contains_0": "contains",
            "tag_0": f"{self.product_generic_name}",
            "json": "true"
        }
        self.req = requests.get(self.url, self.params_overall)
        self.extracted = json.loads(self.req.content.decode('UTF-8'))
        self.pages_number = 0
        self.params_random = {
            "action": "process",
            "tagtype_0": "categories",
            "tag_contains_0": "contains",
            "tag_0": f"{self.product_generic_name}",
            "tagtype_1": "brands",
            "tag_contains_1": "contains",
            "tag_1": "",
            "tagtype_2": "nutriscore_grade",
            "tag_contains_2": "contains",
            "tag_2": "",
            "page_size": "250",
            "json": "true"
        }
        self.params_vanilla = {
            "action": "process",
            "tagtype_0": "categories",
            "tag_contains_0": "contains",
            "tag_0": f"{self.product_generic_name}",
            "tagtype_1": "brands",
            "tag_contains_1": "contains",
            "tag_1": " ",
            "tagtype_2": "nutriscore_grade",
            "tag_contains_2": "contains",
            #"tag_2": "a",
            "page_size": "250",
            "json": "true"
        }
    def product_number(self):
        product_by_page = int(self.extracted['page_size'])
        product_global_number = int(self.extracted['count'])
        pages_number = product_global_number / product_by_page
        pages_number = math.ceil(pages_number)

        return pages_number

    def random_page(self, pages_number):
        pages_list = []
        ok = 0
        x = 0
        y = 0
        for i in range(6): #Permit to don't have repetition on random
            random = randint(0, pages_number)
            if random not in pages_list:
                pages_list.append(random)
            else: pages_list.append(0)
        return pages_list

    def random_product_old(self, pages_list):
        x = 0
        y = 0
        z = 0
        while x != 6:
            ok = 0
            product_rand = []
            params_products = {
                "action": "process",
                "tagtype_0": "categories",
                "tag_contains_0": "contains",
                "page": f"{pages_list[x]}",
                "tag_0": f"{self.product_generic_name}",
                "json": "true"
            }
            req_product = requests.get(self.url, params_products)
            extracted = json.loads(req_product.content.decode('UTF-8'))
            product_lenght = len(extracted['products'])
            while z != 6:
                random = randint(0, product_lenght)
                if random not in product_rand:
                    product_rand.append(random)
                z = z + 1
            while y != 6:
                try:
                    product_select = extracted['products'][product_rand[y]]['product_name']
                    product_rank = extracted['products'][product_rand[y]]['nutriscore_grade']
                except:
                    product_select, product_rank = "NONE", "NONE"
                print(product_select, product_rank)
                y = y + 1
            x = x + 1

    def random_product(self):
        y = 0
        product_rand = []
        
        req_product = requests.get(self.url, self.params_random)
        extracted = json.loads(req_product.content.decode('UTF-8'))
        product_lenght = len(extracted['products'])
        while y != 6:
            try:
                print(extracted['products'][y]['brands'])
            except:
                y = y - 1
            random = randint(0, product_lenght-1)
            print(extracted['products'][random]['product_name'])
            print(extracted['products'][random]['nutriscore_grade'])
            print(extracted['products'][random]['image_url'])
            print("\n")
            y = y + 1

    def vanilla_product(self):
        """best optimized algorythm"""
        x = 0
        y = 0
        vanilla = {}
        req_product = requests.get(self.url, self.params_vanilla)
        extracted = json.loads(req_product.content.decode('UTF-8'))
        product_lenght = len(extracted['products'])
        #random = randint(0, product_lenght-1)
        """ Create random list with only one occurence"""
        randomiser = random.sample(range(1, product_lenght), product_lenght-1)
        while x != 100:
            try:
                brand = extracted['products'][randomiser[y]]['brands']
                nutriscore = extracted['products'][randomiser[y]]['nutriscore_grade']
                name = extracted['products'][randomiser[y]]['product_name']
                image = extracted['products'][randomiser[y]]['image_url']
                energy = extracted['products'][randomiser[y]]['nutriments']['energy_100g']
                energy_kcal = energy * 0.2388
                energy_kcal = int(energy_kcal)
                fat = extracted['products'][randomiser[y]]['nutriments']['fat_100g']
                saturated_fat = extracted['products'][randomiser[y]]['nutriments']['saturated-fat_100g']
                carbohydrates = extracted['products'][randomiser[y]]['nutriments']['carbohydrates_100g']
                sugar = extracted['products'][randomiser[y]]['nutriments']['sugars_100g']
                protein = extracted['products'][randomiser[y]]['nutriments']['proteins_100g']
                salt = extracted['products'][randomiser[y]]['nutriments']['salt_100g']
                url= extracted['products'][randomiser[y]]['url']
            except:
                x = x - 1
            try:
                brand == ""
            except:
                x = x - 1
            #print(brand)
            try:
                vanilla[x] = {
                    "brand": brand,
                    "name": name,
                    "nutriscore": nutriscore,
                    "image": image,
                    "energy": energy,
                    "energy_kcal": energy_kcal,
                    "fat": fat,
                    "saturated_fat": saturated_fat,
                    "carbohydrates": carbohydrates,
                    "sugar": sugar,
                    "protein": protein,
                    "salt": salt,
                    "url": url
                }
            except:
                pass
            y = y + 1
            x = x + 1
            #print(vanilla)
        return vanilla

    def search_product(self):
        req = requests.get(self.url, self.params_overall)
        extracted = json.loads(req.content.decode('UTF-8'))
        product_name = extracted['products'][0]['product_name']
        product_brand = extracted['products'][0]['brands']
        #print(product_name, product_brand)

#pages_number = Datagrab(product_generic).product_number()
#Datagrab(product_generic).search_product()
#pages_list = Datagrab(product_generic).random_page(pages_number)
#Datagrab(product_generic).random_product()
#product_generic = ""
#vanilla = Datagrab("pizza").vanilla_product()